
/* 
Calculate s */
// sdf

class Mod(modulus: Int) extends Obj {
    this.modulus = modulus;

    def mod(x: Int) : Int {
        // Returns x mod this.modulus
    
        y = this.modulus;

        while x >= y {
            x = x - y;
        }

        while x < 0 {
            x = x + y;
        }

        return x;
    }
    
    def printModulus() : Nothing {
        this.modulus.PRINT();
    }
}

class Fibonacci(n: Int) extends Obj {
    this.n = n;
    this.v1 = 1;
    this.v2 = 0;

    def calcfib() : Nothing {
        i = 0;
        while i < this.n {
            v3 = this.v1 + this.v2;

            if v3 < 0 {
                "Warning: integer overflow on iter ".PRINT();
                i.PRINT();
                ". Breaking prematurely\n".PRINT();
                i = this.n;
            } else {
                // Loop invariance: v1 > v2
                this.v2 = this.v1;
                this.v1 = v3;
                i = i + 1;
            }
        }
    }

    def v1() : Int {
        return this.v1;
    }

    def v2() : Int {
        return this.v2;
    }
}

class Division(p: Int, q: Int) {
    this.leading = p / q;

    this.q = q;
    this.mod = Mod(q);

    this.p = this.mod.mod(p) * 10;

    def next() : Int {
        ret = this.p / this.q;
        this.p = this.mod.mod(this.p) * 10;
        return ret;
    }

    def leading() : Int {
        return this.leading;
    }
}


n = 40; // nth Fibonacci 
digits = 64; // Digits to print out

f = Fibonacci(n);
f.calcfib();
p = f.v1();
q = f.v2();

d = Division(p, q);

"This program approximates the Golden Ratio to ".PRINT();
digits.PRINT();
" digits:\n\n".PRINT();
p.PRINT();
" / ".PRINT();
q.PRINT();
" = ".PRINT();

d.leading().PRINT();
".".PRINT();
i = 0;
while i < digits {
    i = i + 1;
    d.next().PRINT();
}
"\n".PRINT();

